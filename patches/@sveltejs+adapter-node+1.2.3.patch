diff --git a/node_modules/@sveltejs/adapter-node/files/index.js b/node_modules/@sveltejs/adapter-node/files/index.js
index f14cf41..37e574f 100644
--- a/node_modules/@sveltejs/adapter-node/files/index.js
+++ b/node_modules/@sveltejs/adapter-node/files/index.js
@@ -216,10 +216,43 @@ const path = env('SOCKET_PATH', false);
 const host = env('HOST', '0.0.0.0');
 const port = env('PORT', !path && '3000');
 
-const server = polka().use(handler);
+const inactivity_timeout = env('INACTIVITY_TIMEOUT', false)
 
-server.listen({ path, host, port }, () => {
-	console.log(`Listening on ${path ? path : host + ':' + port}`);
-});
+let server = polka()
+
+// automatically shutdown server on inactivity more than x ms
+if (inactivity_timeout && !isNaN(parseInt(inactivity_timeout))) {
+	const inactivity_timeout_ms = parseInt(inactivity_timeout)
+	console.log(`The server will be shut down if inactive for ${inactivity_timeout_ms}ms`)
+
+	let serverTimeout = setTimeout(stopServer, inactivity_timeout_ms)
+	function stopServer() {
+		server.close()
+	}
+	function resetTimeoutMiddleware(req, res, next) {
+		clearTimeout(serverTimeout);
+		serverTimeout = setTimeout(stopServer, inactivity_timeout_ms)
+		next();
+	}
+	server = server.use(resetTimeoutMiddleware)
+}
+
+server = server.use(handler)
+
+// systemd socket activation
+const listen_pid = env('LISTEN_PID', false);
+const listen_fds = env('LISTEN_FDS', false);
+const sd_listen_fds_start = 3;
+
+if (listen_pid && listen_fds && process.pid === parseInt(listen_pid)) {
+	const fd = sd_listen_fds_start + parseInt(listen_fds) - 1;
+	server.listen({ fd }, () => {
+		console.log(`Listening on fd ${fd}`);
+	});
+} else {
+	server.listen({ path, host, port }, () => {
+		console.log(`Listening on ${path ? path : host + ':' + port}`);
+	});
+}
 
 export { host, path, port, server };
diff --git a/node_modules/@sveltejs/adapter-node/index.js.orig b/node_modules/@sveltejs/adapter-node/index.js.orig
new file mode 100644
index 0000000..d5fa532
--- /dev/null
+++ b/node_modules/@sveltejs/adapter-node/index.js.orig
@@ -0,0 +1,94 @@
+import { readFileSync, writeFileSync } from 'node:fs';
+import { fileURLToPath } from 'node:url';
+import { rollup } from 'rollup';
+import { nodeResolve } from '@rollup/plugin-node-resolve';
+import commonjs from '@rollup/plugin-commonjs';
+import json from '@rollup/plugin-json';
+
+const files = fileURLToPath(new URL('./files', import.meta.url).href);
+
+/** @type {import('.').default} */
+export default function (opts = {}) {
+	const { out = 'build', precompress, envPrefix = '', polyfill = true } = opts;
+
+	return {
+		name: '@sveltejs/adapter-node',
+
+		async adapt(builder) {
+			const tmp = builder.getBuildDirectory('adapter-node');
+
+			builder.rimraf(out);
+			builder.rimraf(tmp);
+			builder.mkdirp(tmp);
+
+			builder.log.minor('Copying assets');
+			builder.writeClient(`${out}/client${builder.config.kit.paths.base}`);
+			builder.writePrerendered(`${out}/prerendered${builder.config.kit.paths.base}`);
+
+			if (precompress) {
+				builder.log.minor('Compressing assets');
+				await Promise.all([
+					builder.compress(`${out}/client`),
+					builder.compress(`${out}/prerendered`)
+				]);
+			}
+
+			builder.log.minor('Building server');
+
+			builder.writeServer(tmp);
+
+			writeFileSync(
+				`${tmp}/manifest.js`,
+				`export const manifest = ${builder.generateManifest({ relativePath: './' })};\n\n` +
+					`export const prerendered = new Set(${JSON.stringify(builder.prerendered.paths)});\n`
+			);
+
+			const pkg = JSON.parse(readFileSync('package.json', 'utf8'));
+
+			// we bundle the Vite output so that deployments only need
+			// their production dependencies. Anything in devDependencies
+			// will get included in the bundled code
+			const bundle = await rollup({
+				input: {
+					index: `${tmp}/index.js`,
+					manifest: `${tmp}/manifest.js`
+				},
+				external: [
+					// dependencies could have deep exports, so we need a regex
+					...Object.keys(pkg.dependencies || {}).map((d) => new RegExp(`^${d}(\\/.*)?$`))
+				],
+				plugins: [
+					nodeResolve({
+						preferBuiltins: true,
+						exportConditions: ['node']
+					}),
+					commonjs({ strictRequires: true }),
+					json()
+				]
+			});
+
+			await bundle.write({
+				dir: `${out}/server`,
+				format: 'esm',
+				sourcemap: true,
+				chunkFileNames: `chunks/[name]-[hash].js`
+			});
+
+			builder.copy(files, out, {
+				replace: {
+					ENV: './env.js',
+					HANDLER: './handler.js',
+					MANIFEST: './server/manifest.js',
+					SERVER: './server/index.js',
+					SHIMS: './shims.js',
+					ENV_PREFIX: JSON.stringify(envPrefix)
+				}
+			});
+
+			// If polyfills aren't wanted then clear the file
+			if (!polyfill) {
+				writeFileSync(`${out}/shims.js`, '', 'utf-8');
+			}
+		}
+	};
+}
diff --git a/node_modules/@sveltejs/adapter-node/index.js.rej b/node_modules/@sveltejs/adapter-node/index.js.rej
new file mode 100644
index 0000000..cd7a682
--- /dev/null
+++ b/node_modules/@sveltejs/adapter-node/index.js.rej
@@ -0,0 +1,45 @@
+--- index.js
++++ index.js
+@@ -1,6 +1,7 @@
+ import { handler } from 'HANDLER';
+ import { env } from 'ENV';
+ import polka from 'polka';
++import process from 'process';
+ 
+ export const path = env('SOCKET_PATH', false);
+ export const host = env('HOST', '0.0.0.0');
+@@ -8,8 +9,20 @@ export const port = env('PORT', !path && '3000');
+ 
+ const server = polka().use(handler);
+ 
+-server.listen({ path, host, port }, () => {
+-	console.log(`Listening on ${path ? path : host + ':' + port}`);
+-});
++// systemd socket activation
++const listen_pid = env('LISTEN_PID', false);
++const listen_fds = env('LISTEN_FDS', false);
++const sd_listen_fds_start = 3;
++
++if (listen_pid && listen_fds && process.pid === parseInt(listen_pid)) {
++	const fd = sd_listen_fds_start + parseInt(listen_fds) - 1;
++	server.listen({ fd }, () => {
++		console.log(`Listening on fd ${fd}`);
++	});
++} else {
++	server.listen({ path, host, port }, () => {
++		console.log(`Listening on ${path ? path : host + ':' + port}`);
++	});
++}
+ 
+ export { server };
+--- index.js
++++ index.js
+@@ -1,7 +1,7 @@
+ import { handler } from 'HANDLER';
+ import { env } from 'ENV';
+ import polka from 'polka';
+-import process from 'process';
++import process from 'node:process';
+ 
+ export const path = env('SOCKET_PATH', false);
+ export const host = env('HOST', '0.0.0.0');
